{"name":"","littleEndian":false,"symbols":{"verify":{"parameters":["str","str"],"result":"u8","nonBlocking":true}},"typeDefs":{},"tsTypes":{}}}":"u32"}},"tsTypes":{"Params":"export type Params = {\n  /**\n  * Memory size, expressed in kilobytes, between 1 and (2^32)-1.\n  *\n  * Value is an integer in decimal (1 to 10 digits).\n  **/\n  memoryCost: number;\n/**\n  * Number of iterations, between 1 and (2^32)-1.\n  *\n  * Value is an integer in decimal (1 to 10 digits).\n  **/\n  timeCost: number;\n/**\n  * Degree of parallelism, between 1 and 255.\n  *\n  * Value is an integer in decimal (1 to 3 digits).\n  **/\n  parallelismCost: number;\n/**\n  * Size of the output (in bytes).\n  **/\n  outputLength: number | undefined | null;\n};"}}gon2d approach for subsequent passes. This effectively places it in\n  * the \"middle\" between the other two: it doesn't provide as good\n  * TMTO/GPU cracking resistance as Argon2d, nor as good of side-channel\n  * resistance as Argon2i, but overall provides the most well-rounded\n  * approach to both classes of attacks.\n  **/\n  \"Argon2id\";"}}tacks.\n  *\n  * Accesses the memory array in a password independent order, increasing the\n  * possibility of time-memory tradeoff (TMTO) attacks.\n  **/\n  \"Argon2i\"  |\n/**\n  * Hybrid that mixes Argon2i and Argon2d passes (*default*).\n  *\n  * Uses the Argon2i approach for the first half pass over memory and\n  * Argon2d approach for subsequent passes. This effectively places it in\n  * the \"middle\" between the other two: it doesn't provide as good\n  * TMTO/GPU cracking resistance as Argon2d, nor as good of side-channel\n  * resistance as Argon2i, but overall provides the most well-rounded\n  * approach to both classes of attacks.\n  **/\n  \"Argon2id\";"}}